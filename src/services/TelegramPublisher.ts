import { Telegraf } from "telegraf";
import {
  ISummarizedArticle,
  SummarizedArticle,
} from "../models/SummarizedArticle";
import * as dotenv from "dotenv";
import { CronJob } from "cron/dist/job";
import axios from "axios";
import * as fs from "fs";
import * as path from "path";
import * as cheerio from "cheerio";
import { Parser } from "../services/Parser";
import { ChatGPTService } from "../services/ChatGPTService";
import { SourceArticle } from "../models/SourceArticle";
import { TranslatedArticle } from "../models/TranslatedArticle";

dotenv.config();

export class TelegramPublisher {
  private bot: Telegraf;
  private channelId: string;
  private tempDir: string;

  constructor() {
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      throw new Error("TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env");
    }

    if (!process.env.TELEGRAM_CHANNEL_ID) {
      throw new Error("TELEGRAM_CHANNEL_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env");
    }

    this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
    this.channelId = process.env.TELEGRAM_CHANNEL_ID;
    this.tempDir = path.join(__dirname, "../../temp");

    if (!fs.existsSync(this.tempDir)) {
      fs.mkdirSync(this.tempDir, { recursive: true });
    }

    this.bot.catch((err: unknown, ctx) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", err);
    });

    process.once("SIGINT", () => this.stop());
    process.once("SIGTERM", () => this.stop());
  }

  private async uploadToImgBB(imageUrl: string): Promise<string> {
    try {
      console.log("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ImgBB...");

      // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const imageResponse = await axios.get(imageUrl, {
        responseType: "arraybuffer",
        headers: {
          "User-Agent":
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        },
      });

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
      const base64Image = Buffer.from(imageResponse.data).toString("base64");

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ ImgBB
      const formData = new FormData();
      formData.append("image", base64Image);

      const response = await axios.post(
        `https://api.imgbb.com/1/upload?key=${process.env.IMGBB_API_KEY}`,
        formData
      );

      if (response.data?.data?.url) {
        console.log("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ ImgBB");

        return response.data.data.url;
      }

      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ImgBB:", error);

      return imageUrl;
    }
  }

  private async processContent(content: string): Promise<{
    text: string;
    originalImageSrc?: string;
  }> {
    let $ = cheerio.load(content);
    let originalImageSrc: string | undefined;

    // –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç–µ–≥–∏
    $("html, head, body").contents().unwrap();
    $("div").contents().unwrap();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º src –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const firstImg = $("img").first();
    if (firstImg.length) {
      originalImageSrc = firstImg.attr("src");
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
    $("img").remove();

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏–∑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const cleanHtml = $.html().replace(/\n/g, "");
    $ = cheerio.load(cleanHtml);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ <b>
    let isFirstHeading = true;
    $("h1, h2, h3, h4, h5, h6").each((_: number, el: any) => {
      const text = $(el).text().trim();
      if (isFirstHeading) {
        $(el).replaceWith(`<b>${text}</b>\n\n`);
        isFirstHeading = false;
      } else {
        $(el).replaceWith(`\n<b>${text}</b>\n`);
      }
    });

    // –û—Å—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...
    $("p").each((_: number, el: any) => {
      const text = $(el).text().trim();
      $(el).replaceWith(`${text}\n`);
    });

    $("strong").each((_: number, el: any) => {
      const text = $(el).text().trim();
      $(el).replaceWith(`<b>${text}</b>`);
    });

    $("i, em").each((_: number, el: any) => {
      const text = $(el).text().trim();
      $(el).replaceWith(`<i>${text}</i>`);
    });

    let text = $.html().trim();

    text = text.replace(
      /<(?!\/?(b|strong|i|em|a|code|pre|s|strike|u|ins|del|tg-spoiler)\b)[^>]+>/gi,
      ""
    );
    // text = text.replace(/\n{3,}/g, "\n\n");

    return { text, originalImageSrc };
  }

  private async publishPost(article: ISummarizedArticle): Promise<void> {
    const subscriptionLink = `\n\n<a href="https://t.me/CryptoMindsetX">–ö—Ä–∏–ø—Ç–æ–º—ã—à–ª–µ–Ω–∏–µ | –ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç—ã</a>`;

    try {
      console.log("–ù–∞—á–∞–ª–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞...");

      const { text, originalImageSrc } = await this.processContent(
        article.content
      );

      if (originalImageSrc) {
        const newSrc = await this.uploadToImgBB(originalImageSrc);

        if (newSrc) {
          const imageLink = `<a href="${newSrc}">&#8205;</a>`;
          const messageText = imageLink + text.trim() + subscriptionLink;

          await this.bot.telegram.sendMessage(this.channelId, messageText, {
            parse_mode: "HTML",
          });
        }
      } else {
        await this.bot.telegram.sendMessage(
          this.channelId,
          text + subscriptionLink,
          {
            parse_mode: "HTML",
          }
        );
      }

      console.log("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:", error);

      throw error;
    }
  }

  async start(): Promise<void> {
    try {
      this.bot.launch();
      console.log("‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω");

      try {
        await this.bot.telegram.sendChatAction(this.channelId, "typing");
        console.log("‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω");
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É:", error);
        if (error instanceof Error) {
          throw new Error(`–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ ID –∫–∞–Ω–∞–ª–∞: ${error.message}`);
        }

        throw new Error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏ ID –∫–∞–Ω–∞–ª–∞");
      }

      // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–µ–π
      const checkAndProcessArticles = async (): Promise<void> => {
        try {
          console.log("\nüîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏");

          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
          console.log("üëÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π...");
          const pendingArticle = await SummarizedArticle.findOne({
            status: "pending",
          }).sort({ createdAt: 1 });

          if (pendingArticle) {
            console.log("üìù –ù–∞–π–¥–µ–Ω–∞ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è, –ø—É–±–ª–∏–∫—É–µ–º...");
            await this.publishPost(pendingArticle);
            await SummarizedArticle.findByIdAndUpdate(pendingArticle._id, {
              status: "published",
            });
            console.log(`‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: ${pendingArticle._id}`);

            return;
          }

          console.log("üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π...");
          const parser = new Parser();
          const chatGPT = new ChatGPTService();

          const newUrls = await parser.getNewArticles();
          console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${newUrls.length} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π`);

          for (const url of newUrls) {
            try {
              console.log(`\nüåê –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏: ${url}`);

              console.log("1Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—å–∏...");
              const { title, content } = await parser.parseArticle(url);

              console.log("2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏...");
              const sourceArticle = await SourceArticle.create({
                url,
                title,
                content,
                publishedAt: new Date(),
              });
              console.log(`‚úÖ –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${sourceArticle._id}`);

              console.log("3Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—å–∏...");
              const translatedContent = await chatGPT.translateContent(content);
              const translatedArticle = await TranslatedArticle.create({
                sourceArticleId: sourceArticle._id,
                title: title,
                content: translatedContent,
                language: "ru",
              });
              console.log(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${translatedArticle._id}`);

              console.log("4Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è...");
              const summary = await chatGPT.summarizeForTelegram(
                translatedContent
              );
              const summarizedArticle = await SummarizedArticle.create({
                sourceArticleId: sourceArticle._id,
                content: summary,
                status: "pending",
              });
              console.log(
                `‚úÖ –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${summarizedArticle._id}`
              );

              console.log("5Ô∏è‚É£ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram...");
              await this.publishPost(summarizedArticle);
              await SummarizedArticle.findByIdAndUpdate(summarizedArticle._id, {
                status: "published",
              });
              console.log(
                `üéâ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: ${title}`
              );
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏ ${url}:`, error);
              console.log(
                "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç—å—é, –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑"
              );
            }
          }

          console.log("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
        }
      };

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
      console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...");
      await checkAndProcessArticles();

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
      const job = new CronJob("*/5 * * * *", checkAndProcessArticles);
      job.start();
      console.log(
        "‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω (—Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç)"
      );
    } catch (error) {
      console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", error);

      throw error;
    }
  }

  async stop(): Promise<void> {
    try {
      console.log("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...");
      await this.bot.stop();
      console.log("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:", error);

      throw error;
    }
  }

  async testPost(): Promise<void> {
    try {
      console.log("–ü–æ–∏—Å–∫ –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏...");

      const article = await SummarizedArticle.findOne({
        status: "pending",
      }).sort({ createdAt: 1 });

      if (!article) {
        console.log("‚ùå –ù–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");

        return;
      }

      console.log(`–ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç—å—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${article._id}`);
      console.log("–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏...");

      await this.publishPost(article);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—å–∏
      await SummarizedArticle.findByIdAndUpdate(article._id, {
        status: "published",
      });

      console.log("‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏:", error);

      throw error;
    }
  }

  async publishAllPending(): Promise<void> {
    try {
      const pendingArticles = await SummarizedArticle.find({
        status: "pending",
      }).sort({ createdAt: 1 });

      if (pendingArticles.length === 0) {
        console.log("–ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏");

        return;
      }

      console.log(`–ù–∞–π–¥–µ–Ω–æ ${pendingArticles.length} —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);

      for (const article of pendingArticles) {
        await this.publishPost(article);
        await SummarizedArticle.findByIdAndUpdate(article._id, {
          status: "published",
        });
        console.log(`‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: ${article._id}`);
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π:", error);

      throw error;
    }
  }
}
